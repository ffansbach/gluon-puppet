#! /bin/bash

#
#  Helper Bash Script of Gluon Puppet module
# ... creating a gluon site/site.conf
#
# This script just performs some ip address calculations,
# fetches fastd's public key and fills the template
# (after ERB filled the directly known stuff already).
#
# Ip calculation helper functions for bash taken from
# http://www.linuxquestions.org/questions/programming-9/bash-cidr-calculator-646701/
netcalc(){
    local IFS='.' ip i
    local -a oct msk
	
    read -ra oct <<<"$1"
    read -ra msk <<<"$2"

    for i in ${!oct[@]}; do
        ip+=( "$(( oct[i] & msk[i] ))" )
    done
    
    echo "${ip[*]}"
}

mask2cidr() {
    local nbits dec
    local -a octets=( [255]=8 [254]=7 [252]=6 [248]=5 [240]=4 [224]=3 [192]=2 [128]=1 [0]=0 )
    
    while read -rd '.' dec; do
        [[ -z ${octets[dec]} ]] && echo "Error: $dec is not recognised" && exit 1
        (( nbits += octets[dec] ))
        (( dec < 255 )) && break
    done <<<"$1."

    echo "$nbits"
}

ip4_net="`netcalc "<%= @ip4_address %>" "<%= @ip4_netmask %>"`"
ip4_cidr=`mask2cidr "<%= @ip4_netmask %>"`

last="${ip4_net#*.*.*.}"
next_node_ip4="${ip4_net%$last}$[$last + 1]"

fastd_key="`awk '{ if($1 == "Public:") { print $2 } }' < /root/fastd-<%= @community %>-key.txt`"

cat << EOF
{
	hostname_prefix = 'freifunk',
	site_name = '<%= @site_name %>',
	site_code = '<%= @community %>',

	prefix4 = '$ip4_net/$ip4_cidr',
	prefix6 = '<%= @ip6_prefix %>/64',

	timezone = 'CET-1CEST,M3.5.0,M10.5.0/3', -- Europe/Berlin
	ntp_servers = {'<%= @ntp_server %>'},
	regdom = 'DE',

	wifi24 = {
		ssid = '<%= @ssid.downcase %>',
		channel = 1,
		htmode = 'HT40+',
		mesh_ssid = '<%= @mesh_ssid.downcase %>',
		mesh_bssid = '12:CA:FF:EE:23:42',
		mesh_mcast_rate = 12000,
	},
	wifi5 = {
		ssid = '<%= @ssid.downcase %>',
		channel = 44,
		htmode = 'HT40+',
		mesh_ssid = '<%= @mesh_ssid.downcase %>',
		mesh_bssid = '02:44:CA:FF:23:42',
		mesh_mcast_rate = 12000,
	},

	next_node = {
		ip4 = '$next_node_ip4',
		ip6 = '<%= @ip6_prefix %>1',

		mac = '42:ca:ff:ee:ba:be',
	},

	fastd_mesh_vpn = {
		methods = {'salsa2012+gmac'},
		mtu = 1426,
		backbone = {
			limit = 1,
			peers = {
				vpn1 = {
					key = '$fastd_key',
					remotes = {'ipv4 "<%= @gateway_ipaddr %>" port <%= @fastd_port %>'},
				},
				
			},
		},
	},

	autoupdater = {
		enabled = '1',
		branch = 'stable',
		branches = {
			stable = {
				name = 'stable',
				mirrors = {'http://[<%= @ip6_address %>]/images/sysupgrade/'},
				good_signatures = 1,
				pubkeys = {'<%= @auto_update_pubkey %>',
				},
			
			},
		},
	},

	simple_tc = {
		mesh_vpn = {
			ifname = 'mesh-vpn',
			enabled = false,
			limit_egress = 200,
			limit_ingress = 3000,
		},
	},

	config_mode = {
		msg_welcome = [[
Willkommen zum Einrichtungsassistenten für deinen neuen <%= @city_name %>er
Freifunk-Knoten. Fülle das folgende Formular deinen Vorstellungen
entsprechend aus und sende es ab.
]],
		msg_pubkey = [[
Dies ist der öffentliche Schlüssel deines Freifunkknotens. Erst nachdem
er auf den Servern des <%= @city_name %>er Freifunk-Projektes eingetragen wurde,
kann sich dein Knoten mit dem <%= @city_name %>er Mesh-VPN zu verbinden. Bitte
schicke dazu diesen Schlüssel und den Namen deines Knotens
(<em><$hack%=hostname%></em>) an
<a href="mailto:<%= @reg_email_addr.downcase %>"><%= @reg_email_addr.downcase %></a> oder damit es schneller geht, melde ihn über das Formular auf der Seite <a href="<%= @ssl ? "https" : "http" %>://<%= @site_domain.downcase %>/router-anmelden/"><%= @ssl ? "https" : "http" %>://<%= @site_domain.downcase %>/router-anmelden/</a> selbst am Netzwerk an.
]],
		msg_reboot = [[
<p>
Dein Knoten startet gerade neu und wird anschließend versuchen,
sich mit anderen Freifunkknoten in seiner Nähe zu
verbinden. <p>Bis der Knoten eine Verbindung zum Internet herstellen kann dauert es MINDESTENS 5 Minuten!<p> Weitere Informationen zur
<%= @city_name %>er Freifunk-Community findest du auf
<a href="<%= @community_url.downcase %>">unserer Webseite</a>.
</p>
<p>
Viel Spaß mit deinem Knoten und der Erkundung von Freifunk!
</p>
]],
	},

	legacy = {
	       version_files = {'/etc/.freifunk_version_keep', '/etc/.lff_version_keep'},
	       old_files = {'/etc/config/config_mode', '/etc/config/ffhl', '/etc/config/freifunk'},

	       config_mode_configs = {'config_mode', 'ffhl', 'freifunk'},
	       fastd_configs = {'ffhl_mesh_vpn', 'mesh_vpn'},
	       mesh_ifname = 'freifunk',
	       tc_configs = {'ffhl', 'freifunk'},
	       wifi_names = {'wifi_freifunk', 'wifi_freifunk5', 'wifi_mesh', 'wifi_mesh5'},
	},
}
EOF
