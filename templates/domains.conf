#! /bin/bash

#
#  Helper Bash Script of Gluon Puppet module
# ... creating a gluon site/domains/ structure
#
# This script just performs some ip address calculations,
# fetches fastd's public key and fills the template
# (after ERB filled the directly known stuff already).
#
# Ip calculation helper functions for bash taken from
# http://www.linuxquestions.org/questions/programming-9/bash-cidr-calculator-646701/

LEGACY_DOMAIN="batman_legacy"
DOMAINS="batman"

netcalc(){
	local IFS='.' ip i
	local -a oct msk

	read -ra oct <<<"$1"
	read -ra msk <<<"$2"

	for i in ${!oct[@]}; do
		ip+=( "$(( oct[i] & msk[i] ))" )
	done

	echo "${ip[*]}"
}

mask2cidr() {
	local nbits dec
	local -a octets=( [255]=8 [254]=7 [252]=6 [248]=5 [240]=4 [224]=3 [192]=2 [128]=1 [0]=0 )

	while read -rd '.' dec; do
		[[ -z ${octets[dec]} ]] && echo "Error: $dec is not recognised" && exit 1
		(( nbits += octets[dec] ))
		(( dec < 255 )) && break
	done <<<"$1."

	echo "$nbits"
}

ip4_net="`netcalc "<%= @ip4_address %>" "<%= @ip4_netmask %>"`"
ip4_cidr=`mask2cidr "<%= @ip4_netmask %>"`

last="${ip4_net#*.*.*.}"
next_node_ip4="${ip4_net%$last}$[$last + 1]"

_domain=$LEGACY_DOMAIN
cat > /srv/gluon-<%= @community %>/site/domains/$_domain.conf << EOF
{
	domain_names = {
		$_domain = '$_domain',
	}

	hide_domain = true,

	domain_seed = '<%= @domain_seed %>',

	prefix4 = '$ip4_net/$ip4_cidr',
	prefix6 = '<%= @ip6_prefix %>/64',

	mesh = {
		vxlan = false,
		batman_adv = {
			routing_algo = 'BATMAN_IV_LEGACY',
			gw_sel_class = 20,
		},
	},
	wifi24 = {
		channel = 1,
		ap = {
			ssid = '<%= @ssid.downcase %>',
		},
		mesh = {
			id = '<%= @community %>-mesh',
			mcast_rate = 12000,
		},
	},
	wifi5 = {
		channel = 44,
		ap = {
			ssid = '<%= @ssid.downcase %>',
		},
		mesh = {
			id = '<%= @community %>-mesh',
			mcast_rate = 12000,
		},
	},

	next_node = {
		ip4 = '$next_node_ip4',
		ip6 = '<%= @ip6_prefix %>1',

		mac = '42:ca:ff:ee:ba:be', # TODO
	},

	mesh_vpn = {
		mtu = <%= @mtu %>,
		fastd = {
			methods = {'<%= @cipher %>'},
			groups = {
				ipvsix = {
					limit = 1,
					peers = {
EOF
(
cd <%= @peers_dir %>
gawk "/key/ { key = substr(\$2, 2, 64) } /remote/ { if(match(\$2, /([^:]+):([0-9]+)/, arr)) { ip = arr[1]; port = arr[2]; } remote = \$2 } END { if(ip && port) { print \"<%= @ip6_gateway %> = {\n\tkey = '\"key\"',\n\tremotes = { 'ipv4 \\\"\"ip\"\\\" port \"port\"' },\n}, \" } }" < <%= @ip6_gateway %>
) >> /srv/gluon-<%= @community %>/site/domains/$_domain.conf
cat >> /srv/gluon-<%= @community %>/site/domains/$_domain.conf <<EOF
					},
				},
				backbone = {
					limit = 1,
					peers = {
EOF
(
cd <%= @peers_dir %>
for fn in *; do
	[ "$fn" == "<%= @ip6_gateway %>" ] && continue
	gawk "/key/ { key = substr(\$2, 2, 64) } /remote/ { if(match(\$2, /([^:]+):([0-9]+)/, arr)) { ip = arr[1]; port = arr[2]; } remote = \$2 } END { if(ip && port) { print \"$fn = {\n\tkey = '\"key\"',\n\tremotes = { 'ipv4 \\\"\"ip\"\\\" port \"port\"' },\n}, \" } }" < $fn
done
) >> /srv/gluon-<%= @community %>/site/domains/$_domain.conf
cat >> /srv/gluon-<%= @community %>/site/domains/$_domain.conf <<EOF
					},
				},
			},
		},
	},
}
EOF

for _domain in $DOMAINS; do
cat > /srv/gluon-<%= @community %>/site/domains/$_domain.conf << EOF
{
	domain_names = {
		$_domain = '$_domain',
	}

	hide_domain = true,

	domain_seed = '<%= @domain_seed %>',

	prefix4 = '$ip4_net/$ip4_cidr',
	prefix6 = '<%= @ip6_prefix %>/64',

	mesh = {
		vxlan = true,
		batman_adv = {
			routing_algo = 'BATMAN_IV',
			gw_sel_class = 20,
		},
	},
	wifi24 = {
		channel = 1,
		ap = {
			ssid = '<%= @ssid.downcase %>',
		},
		mesh = {
			id = '<%= @community %>-mesh',
			mcast_rate = 12000,
		},
	},
	wifi5 = {
		channel = 44,
		ap = {
			ssid = '<%= @ssid.downcase %>',
		},
		mesh = {
			id = '<%= @community %>-mesh',
			mcast_rate = 12000,
		},
	},

	next_node = {
		ip4 = '$next_node_ip4',
		ip6 = '<%= @ip6_prefix %>1',
	},

	mesh_vpn = {
		mtu = <%= @mtu %>,
		fastd = {
			methods = {'<%= @cipher %>'},
			groups = {
				ipvsix = {
					limit = 1,
					peers = {
EOF
(
cd <%= @peers_dir %>
gawk "/key/ { key = substr(\$2, 2, 64) } /remote/ { if(match(\$2, /([^:]+):([0-9]+)/, arr)) { ip = arr[1]; port = arr[2]; } remote = \$2 } END { if(ip && port) { print \"<%= @ip6_gateway %> = {\n\tkey = '\"key\"',\n\tremotes = { 'ipv4 \\\"\"ip\"\\\" port \"port\"' },\n}, \" } }" < <%= @ip6_gateway %>
) >> /srv/gluon-<%= @community %>/site/domains/$_domain.conf
cat >> /srv/gluon-<%= @community %>/site/domains/$_domain.conf <<EOF
					},
				},
				backbone = {
					limit = 1,
					peers = {
EOF
(
cd <%= @peers_dir %>
for fn in *; do
	[ "$fn" == "<%= @ip6_gateway %>" ] && continue
	gawk "/key/ { key = substr(\$2, 2, 64) } /remote/ { if(match(\$2, /([^:]+):([0-9]+)/, arr)) { ip = arr[1]; port = arr[2]; } remote = \$2 } END { if(ip && port) { print \"$fn = {\n\tkey = '\"key\"',\n\tremotes = { 'ipv4 \\\"\"ip\"\\\" port \"port\"' },\n}, \" } }" < $fn
done
) >> /srv/gluon-<%= @community %>/site/domains/$_domain.conf
cat >> /srv/gluon-<%= @community %>/site/domains/$_domain.conf <<EOF
					},
				},
			},
		},
	},
}
EOF
done
